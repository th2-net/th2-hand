/******************************************************************************
 * Copyright 2009-2020 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
plugins {
	id 'java'
	id 'application'
	id 'distribution'
	id 'com.google.protobuf' version '0.8.8'
	id 'com.jfrog.artifactory' version '4.15.1'
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

group 'com.exactpro.th2'
version = "${version_major}.${version_minor}-SNAPSHOT"

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.google.protobuf'

ext {
	version_slf4j = '1.7.30'
	grpcVersion = '1.30.0' // CURRENT_GRPC_VERSION
	protobufVersion = '3.12.0'
	protocVersion = "${protobufVersion}"
	cth_core_version = '1.0.10452'

	mainRsrcDir = 'src/main/resources'
	sharedDir = file("${projectDir}/shared")
	genDir = file("${projectDir}/src/gen")
}

repositories {
	maven {
		name 'MavenLocal'
		url sharedDir
	}
	
	maven {
		name 'Artifactory snapshot'
		url 'http://artifactory5.exp.exactpro.com/artifactory/libs-snapshot'
	}
	
	mavenCentral()
	
	configurations.all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
	}
}

dependencies {
	compile "org.slf4j:slf4j-api:${version_slf4j}"
	compile "org.slf4j:slf4j-log4j12:${version_slf4j}"
	
	compile "io.grpc:grpc-protobuf:${grpcVersion}"
	compile "io.grpc:grpc-stub:${grpcVersion}"
	compile "io.grpc:grpc-netty-shaded:${grpcVersion}"

	compile "com.rabbitmq:amqp-client:5.8.0"
	compile "com.exactpro.th2:th2-grpc-infra:+"
	
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'org.apache.httpcomponents:fluent-hc:4.5.5'
	compile 'org.apache.httpcomponents:httpclient:4.5.5'
	compile 'org.apache.httpcomponents:httpclient-cache:4.5.5'
	compile 'org.apache.httpcomponents:httpclient-win:4.5.5'
	compile 'org.apache.httpcomponents:httpcore:4.4.9'
	compile 'org.apache.httpcomponents:httpmime:4.5.5'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.4.2'
	
	//for support of jdk 11
	compile "javax.annotation:javax.annotation-api:1.3.2"
	
	compile "org.apache.commons:commons-csv:1.8"
	
	testImplementation 'junit:junit:4.12'
	testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
	main {
		java {
			srcDir "${genDir}/main/grpc"
			srcDir "${genDir}/main/java"
			srcDir "src/main/proto"
		}
		resources {
			srcDir "${mainRsrcDir}"
		}
	}
}

protobuf {
	
	protoc {
		artifact = "com.google.protobuf:protoc:3.12.0"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.30.0'
		}
	}
	generateProtoTasks.generatedFilesBaseDir = genDir
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

compileJava.dependsOn.add('generateProto')

distTar {
	archiveName "${rootProject.name}.tar"
}

clean {
	delete genDir
}

application {
	mainClassName = "com.exactpro.th2.hand.Application"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			name = 'localRepo'
			url = sharedDir
		}
	}
}

jar {
	archivesBaseName = "${archivesBaseName}"
	manifest {
		attributes('Specification-Title': 'TH2 Hand')
		attributes('Main-Class': 'com.exactpro.th2.hand.Application')
		attributes("Class-Path": configurations.compileClasspath.collect { "lib/" + it.getName() }.join(' '))
	}
}

task release(group: 'distribution', type: Zip, dependsOn: jar) {
	archiveName = "${archivesBaseName}"+getDate('yyyyMMdd.HHmmss')+".zip"
	from(configurations.compileClasspath) {
		into "lib"
	}
	from jar
}

artifactory {
	publish {
		defaults {
			// Reference to Gradle publications defined in the build script.
			// This is how we tell the Artifactory Plugin which artifacts should be
			// published to Artifactory.
			publications('mavenJava')
			publishArtifacts = true
			publishBuildInfo = true
			// Properties to be attached to the published artifacts.
			publishPom = true
		}
	}
}

static def getDate(String format) {
	def date = new Date()
	def formattedDate = date.format(format)
	return formattedDate
}