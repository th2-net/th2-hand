/******************************************************************************
 * Copyright 2009-2024 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
	id 'java'
	id 'java-library'
	id 'application'
	id 'maven-publish'
	id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
	id 'com.palantir.docker' version '0.34.0'
	id "org.owasp.dependencycheck" version "9.0.9"
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
	id 'com.github.jk1.dependency-license-report' version '2.5'
	id "de.undercouch.download" version "5.4.0"
	id 'signing'
	id "com.google.protobuf" version "0.9.3"
}

group 'com.exactpro.th2'
version = release_version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
	maven {
		name 'Sonatype_snapshots'
		url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
	}
	maven {
		name 'Sonatype_releases'
		url 'https://s01.oss.sonatype.org/content/repositories/releases/'
	}

	configurations.configureEach {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
	}
}

dependencies {
	api platform('com.exactpro.th2:bom:4.5.0')

	implementation('com.exactpro.remotehand:remotehand:1.7.3-TH2-4662-4046816762-SNAPSHOT') {
		exclude group: "org.slf4j", module: "slf4j-log4j12"
	}
	implementation("com.exactpro.th2:grpc-hand:3.0.0-RM-84612-+") {
		exclude group: "com.google.guava", module: "guava" // for compatibility with Selenium 3.141.59
	}
	implementation("com.exactpro.th2:common:5.8.0-dev") {
		exclude group: "com.google.guava", module: "guava" // for compatibility with Selenium 3.141.59
	}
	implementation("com.exactpro.th2:common-utils:2.2.2-dev") {
		exclude group: "com.google.guava", module: "guava" // for compatibility with Selenium 3.141.59
	}

	implementation 'org.slf4j:slf4j-api'

	implementation "com.fasterxml.jackson.core:jackson-core"
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "com.fasterxml.jackson.core:jackson-annotations"

	implementation 'org.apache.commons:commons-lang3'
	implementation "org.apache.commons:commons-csv:1.9.0"
}

java {
	withJavadocJar()
	withSourcesJar()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
	onlyIf {
		(repository == publishing.repositories.nexusRepository &&
				project.hasProperty('nexus_user') &&
				project.hasProperty('nexus_password') &&
				project.hasProperty('nexus_url')) ||
				(repository == publishing.repositories.sonatype &&
						project.hasProperty('sonatypeUsername') &&
						project.hasProperty('sonatypePassword'))
	}
}
tasks.withType(Sign).configureEach {
	onlyIf {
		project.hasProperty('signingKey') &&
				project.hasProperty('signingPassword')
	}
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
	if (task.name == 'initializeSonatypeStagingRepository' &&
			!(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
	) {
		task.enabled = false
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from(components.java)
			pom {
				name = rootProject.name
				packaging = 'jar'
				description = rootProject.description
				url = vcs_url
				scm {
					url = vcs_url
				}
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'developer'
						name = 'developer'
						email = 'developer@exactpro.com'
					}
				}
				scm {
					url = vcs_url
				}
			}
		}
	}
	repositories {
		//Nexus repo to publish from gitlab
		maven {
			name = 'nexusRepository'
			credentials {
				username = project.findProperty('nexus_user')
				password = project.findProperty('nexus_password')
			}
			url = project.findProperty('nexus_url')
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
		}
	}
}

signing {
	String signingKey = findProperty("signingKey")
	String signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.mavenJava
}

applicationName = 'service'

application {
	mainClass = 'com.exactpro.th2.hand.Application'
}

distTar {
	archiveFileName = "${applicationName}.tar"
}

dockerPrepare {
	dependsOn distTar
}

docker {
	copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

jar {
	archivesBaseName = applicationName
	manifest {
		attributes('Specification-Title': 'TH2 Hand')
		attributes('Main-Class': 'com.exactpro.th2.hand.Application')
		attributes("Class-Path": configurations.compileClasspath.collect { "lib/" + it.getName() }.join(' '))
		attributes(
				'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
				'Specification-Title':      '',
				'Specification-Vendor':     'Exactpro Systems LLC',
				'Implementation-Title':     project.archivesBaseName,
				'Implementation-Vendor':    'Exactpro Systems LLC',
				'Implementation-Vendor-Id': 'com.exactpro',
				'Implementation-Version':   project.version
		)
	}
}

dependencyCheck {
	formats = ['SARIF', 'JSON', 'HTML']
	failBuildOnCVSS = 5

	analyzers {
		assemblyEnabled = false
		nugetconfEnabled = false
		nodeEnabled = false
	}
}

licenseReport {
	def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

	if (!file(licenseNormalizerBundlePath).exists()) {
		download.run {
			src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
			dest "$buildDir/license-normalizer-bundle.json"
			overwrite false
		}
	}

	filters = [
			new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
	]
	renderers = [
			new JsonReportRenderer('licenses.json', false),
	]
	excludeOwnGroup = false
	allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}